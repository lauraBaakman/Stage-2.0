#ifndef KERNELS_GAUSSIAN_IH_H
#define KERNELS_GAUSSIAN_IH_H

#include <gsl/gsl_matrix.h>
#include <gsl/gsl_blas.h>
#include <gsl/gsl_linalg.h>

#include <math.h>

#include "gaussian.h"

/* Symmetric */
double computeStandardGaussianConstant(size_t dimension);
double standardGaussianPDF(gsl_vector* pattern, double constant);

static double normal_pdf(gsl_vector* pattern);
static void normal_prepare(size_t dimension);
static void normal_free();

/* Shape Adaptive */
void shapeAdaptiveGaussianConstants(gsl_matrix* globalBandwidthMatrix, gsl_matrix *outGlobalInverse,
                                    double *outGlobalScalingFactor, double *outPDFConstant);

double shapeAdaptiveGaussianPDF(gsl_vector* pattern, double localBandwidth,
                                double globalScalingFactor, gsl_matrix * globalInverse, double gaussianConstant,
                                gsl_vector* scaledPattern, gsl_matrix* globalBandwidthMatrix);

void sa_allocate(size_t dimension);
void sa_compute_constants(gsl_matrix* globalBandwidthMatrix);
void sa_free();

#endif //KERNELS_GAUSSIAN_IH_H
