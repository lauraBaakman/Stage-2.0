#ifndef KERNELS_KERNELS_IH
#define KERNELS_KERNELS_IH

#include "kernels.h"
#include <printf.h>
#include <math.h>
#include "../utils.h"
#include "gsl/gsl_randist.h"

/* Symmetric Kernels */

double standardGaussianConstant(int patternDimensionality);
double standardGaussianPDF(double *pattern, int patternDimensionality, double constant);

double epanechnikovConstant(int dimensionality);
double epanechnikovPDF(double *data, int dimensionality, double constant);

double testKernelConstant(int patternDimensionality);
double testKernelPDF(double *data, int dimensionality, double constant);


/* Asymmetric Kernels */

gsl_matrix* gaussianConstant(Array* covarianceMatrix);
double gaussianPDF(gsl_vector* pattern, gsl_vector * mean, gsl_matrix * choleskyFactorCovarianceMatrix);


/* Shape Adaptive Kernels */

void computeGlobalConstants(Array* globalBandwidthMatrixArray,
                            gsl_matrix* outGlobalInverse, double* outGlobalScalingFactor);

double computeLocalScalingFactor(double globalScalingFactor, double localBandwidth, int dimension);

double shapeAdaptiveGaussianPDF(gsl_vector* pattern, double localBandwidth, gsl_matrix * globalBandwidthMatrix,
                                double globalScalingFactor);

/* Utilities */

double dotProduct(double *a, double *b, int length);

#endif //KERNELS_KERNELS_IH
