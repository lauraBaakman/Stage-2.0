#ifndef SAMBE_IH
#define SAMBE_IH

#include "sambe.h"

#include <printf.h>
#include <omp.h>
#include <stdlib.h>

#include <gsl/gsl_matrix.h>
#include <gsl/gsl_vector_double.h>

#include "utils/knn.h"
#include "utils/covariancematrix.h"
#include "utils/gsl_utils.h"



extern gsl_matrix* g_globalBandwidthMatrix;

static void computeKernelTerms(gsl_vector* numUsedPatterns);

static void computeKernelTermxForX(gsl_vector *x, int* usedPatternCount, gsl_vector* terms, int pid);

static void determineGlobalKernelShape(gsl_vector* x, int pid);

static void prepareGlobals(gsl_matrix *xs, gsl_matrix *xis,
                    gsl_vector *localBandwidths, double globalBandwidth,
                    KernelType kernel, int k);

static void allocateGlobals(size_t dataDimension, size_t num_xi_s, size_t num_x_s, size_t k);

static void freeGlobals();

#endif //SAMBE_IH