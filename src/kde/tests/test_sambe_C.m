close all; clear variables; clc; 

xs = [0, 0;...
      0, 1;...      
      1, 0;...
      1, 1];

xis = [0, 0;...
       0, 1;...      
       1, 0;...
       1, 1];

kdTree = KDTreeSearcher(xis);

k = 3;

numXs = size(xs, 2);

local_bandwidths = [0.840896194314, 1.18920742746, 1.18920742746, 0.840896194314];

findNearestNeighboursC = @(kdTree, x, k) xs(kdTree.knnsearch(x,'K',k), :);
computeScalingFactor = @(bandwidthmatrix, h) (prod(eig(bandwidthmatrix))^(-1 / size(bandwidthmatrix, 1))) * h;
computeBandwidthMatrix = @(x, nearestNeighbours) computeScalingFactor(cov(nearestNeighbours)) * cov(nearestNeighbours);

kernel = @(pattern, H, localBandwidth) 1 / det(localBandwidth * H) * mvnpdf(inv(localBandwidth * H) * pattern');

sambe = @(x, xis, localBandwidths, H, kernel) 1 / 4 * (...
    kernel(x - xis(1, :), H, local_bandwidths(1)) + ...
    kernel(x - xis(2, :), H, local_bandwidths(2)) + ...    
    kernel(x - xis(3, :), H, local_bandwidths(3)) + ...        
    kernel(x - xis(4, :), H, local_bandwidths(4))   ...            
);


H1 = [+0.832940370216, -0.416470185108; -0.416470185108, +0.832940370216];
sambe(xs(1, :), xis, local_bandwidths, H1, kernel)  % Expected 0.143018801262988