#ifndef KERNELS_KNN_IH
#define KERNELS_KNN_IH

#include "knn.h"
#include <gsl/gsl_vector_double.h>
#include "gsl_utils.h"
#include "../../lib/kdtree/kdtree.h"


typedef struct ListElement{
    double* value;
    size_t index;
} ListElement;

void getKNearestElements(ListElement* sortedDistances, size_t k, gsl_matrix* patterns, gsl_matrix* outNeighbours);

void computeDistanceMatrix(gsl_matrix* patterns, gsl_matrix* distanceMatrix);

ListElement* toArrayOfListElements(gsl_vector *distances);

int listElementCompare(const void *s1, const void *s2);
void listElementArraySort(ListElement* elements, size_t numElements);
void listElementArrayPrint(ListElement* elements, size_t numElements);
void listElementPrint(ListElement* element);

double squaredEuclidean(gsl_vector* a, gsl_vector* b);

static void buildKDTree(struct kdtree* tree, gsl_matrix* xs);

static void computeNearestNeighboursKDHelper(gsl_matrix* patterns, gsl_vector *pattern, int k);

static void computeNearestNeighboursKD(struct kdtree* tree, gsl_vector* pattern, int k, gsl_matrix* neighbours);

#endif //KERNELS_KNN_IH
